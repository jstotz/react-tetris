{"version":3,"sources":["lib/pieces.ts","lib/core.ts","sounds/sprite.mp3","sounds/sprite.ts","themes.ts","hooks/useLocalStorage.ts","hooks/useGame.ts","hooks/useInterval.ts","GameContext.ts","components/Board.tsx","hooks/useFitWithAspectRatio.ts","components/Settings.tsx","components/Game.tsx","reportWebVitals.ts","index.tsx"],"names":["definePiece","definition","shape","grid","map","row","block","type","x","y","preview","J","L","T","I","O","pieces","newEmptyRow","width","times","newEmptyGrid","height","newRandomPieceCentered","boardWidth","piece","Math","floor","length","centerPiece","PIECES","random","cellIsOccupied","cell","boardPositionIsValid","board","boardPositionIsWithinBounds","piecePositionIsValid","yOffset","xOffset","renderPiece","produce","newBoard","forEach","pieceCell","renderPieceWithDropPreview","previewPiece","color","movePieceToBottom","newPieceDropPreview","newPiece","movePieceDown","soundSpriteUrl","soundSpriteMap","linesCleared","tetris","THEMES","light","textColor","colors","gray","emptyColor","previewColor","backgroundColor","white","pieceColors","pink","grape","violet","blue","S","orange","Z","lime","red","dark","yellow","useLocalStorage","key","defaultValue","useState","initialPersistedData","window","localStorage","getItem","JSON","parse","valueState","setValueState","value","removeItem","setItem","stringify","tick","state","draft","exec","game","gameIsActive","baseBoard","newGrid","filter","every","completedRowCount","concat","removeCompletedRows","soundId","score","Error","calculateScore","nextPiece","gameOver","settingsOpen","paused","newGameState","config","boardHeight","newState","themeId","newGameData","newConfig","theme","pieceMoves","left","right","down","rotate","i","val","j","hardDrop","reducer","action","moveFn","movePieceIfValid","move","useGame","initialGameState","saveGameState","initialThemeId","saveTheme","effectsMap","playSound","_","id","saveGame","restoreSavedGame","__","_dispatch","useEffectReducer","dispatch","useSound","soundEnabled","sprite","movePiece","useHotkey","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","GameContext","createContext","Board","aspectRatioWidth","aspectRatioHeight","useDimensions","ref","containerWidth","containerHeight","useFitWithAspectRatio","useContext","sheet","useMemo","stylesheet","container","display","gap","gridAutoRows","gridTemplateColumns","gridTemplateRows","empty","mapValues","className","style","flatMap","Settings","nextThemeId","onClick","Game","data","topBar","padding","boardContainer","Provider","isOpen","contentLabel","onRequestClose","content","overlay","fadeOut","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Modal","setAppElement","normalize","setupPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.541dde65.chunk.js","sourcesContent":["import { Grid, Piece, PieceShape } from \"./core\";\n\nexport function definePiece(\n  definition: Array<Array<1 | 0>>,\n  shape: PieceShape\n): Piece {\n  const grid: Grid = definition.map((row) =>\n    row.map((block) =>\n      block === 0 ? { type: \"empty\" } : { type: \"piece\", shape: shape }\n    )\n  );\n  return {\n    x: 0,\n    y: 0,\n    shape,\n    grid,\n    preview: false,\n  };\n}\n\nexport const J = definePiece(\n  [\n    [0, 1, 0],\n    [0, 1, 0],\n    [1, 1, 0],\n  ],\n  \"J\"\n);\n\nexport const L = definePiece(\n  [\n    [0, 1, 0],\n    [0, 1, 0],\n    [0, 1, 1],\n  ],\n  \"L\"\n);\n\nexport const T = definePiece(\n  [\n    [0, 0, 0],\n    [1, 1, 1],\n    [0, 1, 0],\n  ],\n  \"T\"\n);\n\nexport const I = definePiece(\n  [\n    [0, 0, 0, 0],\n    [1, 1, 1, 1],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ],\n  \"I\"\n);\n\nexport const O = definePiece(\n  [\n    [1, 1],\n    [1, 1],\n  ],\n  \"O\"\n);\n\nexport const S = definePiece(\n  [\n    [0, 1, 1],\n    [1, 1, 0],\n    [0, 0, 0],\n  ],\n  \"S\"\n);\n\nexport const Z = definePiece(\n  [\n    [1, 1, 0],\n    [0, 1, 1],\n    [0, 0, 0],\n  ],\n  \"Z\"\n);\n\nconst pieces: Array<Piece> = [J, T, L, I, S, Z, O];\n\nexport default pieces;\n","import produce from \"immer\";\nimport { random, times } from \"lodash\";\nimport PIECES from \"./pieces\";\n\nexport type PieceShape = \"J\" | \"T\" | \"L\" | \"I\" | \"S\" | \"Z\" | \"O\";\n\ntype CellEmpty = {\n  type: \"empty\";\n};\n\ntype CellPreview = {\n  type: \"preview\";\n};\n\ntype CellPiece = {\n  type: \"piece\";\n  shape: PieceShape;\n};\n\ntype Cell = CellEmpty | CellPreview | CellPiece;\n\nexport type Grid = Cell[][];\n\nexport interface BoardData {\n  width: number;\n  height: number;\n  grid: Grid;\n}\n\nexport interface Piece {\n  x: number;\n  y: number;\n  shape: PieceShape;\n  grid: Grid;\n  preview: boolean;\n}\n\nexport const rotateGrid = (grid: Grid): Grid => {\n  return grid.map((row, i) =>\n    row.map((val, j) => grid[grid.length - 1 - j][i])\n  );\n};\n\nfunction newEmptyRow(width: number): Cell[] {\n  return times(width, () => ({ type: \"empty\" }));\n}\n\nfunction newEmptyGrid(width: number, height: number): Grid {\n  return times(height, () => newEmptyRow(width));\n}\n\nexport function newEmptyBoard(width: number, height: number): BoardData {\n  return {\n    width: width,\n    height: height,\n    grid: newEmptyGrid(width, height),\n  };\n}\n\nfunction newRandomPiece(): Piece {\n  return {\n    ...PIECES[random(0, PIECES.length - 1)],\n  };\n}\n\nfunction centerPiece(piece: Piece, boardWidth: number): Piece {\n  const x = Math.floor((boardWidth - piece.grid[0].length) / 2);\n  return { ...piece, x: x };\n}\n\nexport function newRandomPieceCentered(boardWidth: number): Piece {\n  return centerPiece(newRandomPiece(), boardWidth);\n}\n\nfunction newPieceDropPreview(piece: Piece, board: BoardData): Piece {\n  const previewPiece = { ...piece, color: \"#ddd\", preview: true };\n  return movePieceToBottom(previewPiece, board);\n}\n\nfunction cellIsOccupied(cell: Cell): boolean {\n  return cell.type === \"piece\";\n}\n\n// Returns copy of the given board with completed rows removed\nexport function removeCompletedRows(\n  board: BoardData\n): { board: BoardData; completedRowCount: number } {\n  let newGrid = board.grid.filter((row) => !row.every(cellIsOccupied));\n  let completedRowCount = board.height - newGrid.length;\n  if (completedRowCount > 0) {\n    const newEmptyRows = times(board.height - newGrid.length, () =>\n      newEmptyRow(board.width)\n    );\n    newGrid = newEmptyRows.concat(newGrid);\n  }\n  return { board: { ...board, grid: newGrid }, completedRowCount };\n}\n\nfunction boardPositionIsWithinBounds(\n  x: number,\n  y: number,\n  board: BoardData\n): boolean {\n  return x >= 0 && x < board.width && y >= 0 && y < board.height;\n}\n\nfunction boardPositionIsValid(x: number, y: number, board: BoardData): boolean {\n  return (\n    boardPositionIsWithinBounds(x, y, board) &&\n    !cellIsOccupied(board.grid[y][x])\n  );\n}\n\nexport function piecePositionIsValid(piece: Piece, board: BoardData): boolean {\n  for (let yOffset = 0; yOffset < piece.grid.length; yOffset++) {\n    for (let xOffset = 0; xOffset < piece.grid[yOffset].length; xOffset++) {\n      const [x, y] = [xOffset + piece.x, yOffset + piece.y];\n      const cell = piece.grid[yOffset][xOffset];\n      const blockIsVisible = cell.type !== \"empty\";\n      if (!blockIsVisible) {\n        continue;\n      }\n      if (!boardPositionIsValid(x, y, board)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n// Returns a copy of the board with the piece rendered into it\nexport function renderPiece(piece: Piece, board: BoardData): BoardData {\n  return produce(board, (newBoard) => {\n    piece.grid.forEach((row, yOffset) => {\n      row.forEach((pieceCell, xOffset) => {\n        if (pieceCell.type === \"empty\") return;\n        const cell: Cell = {\n          type: piece.preview ? \"preview\" : \"piece\",\n          shape: piece.shape,\n        };\n        const x = piece.x + xOffset;\n        const y = piece.y + yOffset;\n        if (boardPositionIsValid(x, y, board)) {\n          newBoard.grid[y][x] = cell;\n        }\n      });\n    });\n  });\n}\n\n// Returns a copy of the board with the piece and a piece drop preview\n// rendered into it\nexport function renderPieceWithDropPreview(\n  piece: Piece,\n  board: BoardData\n): BoardData {\n  return renderPiece(\n    newPieceDropPreview(piece, board),\n    renderPiece(piece, board)\n  );\n}\n\nexport const movePieceToBottom = (piece: Piece, board: BoardData) => {\n  while (true) {\n    let newPiece = { ...piece, y: piece.y + 1 };\n    if (piecePositionIsValid(newPiece, board)) {\n      piece = newPiece;\n    } else {\n      return piece;\n    }\n  }\n};\n\nexport const movePieceLeft = (piece: Piece) => ({ ...piece, x: piece.x - 1 });\n\nexport const movePieceRight = (piece: Piece) => ({ ...piece, x: piece.x + 1 });\n\nexport const movePieceDown = (piece: Piece) => ({ ...piece, y: piece.y + 1 });\n\nexport const rotatePiece = (piece: Piece) => ({\n  ...piece,\n  grid: rotateGrid(piece.grid),\n});\n\nexport function calculateScore(completedRowCount: number): number {\n  switch (completedRowCount) {\n    case 0:\n      return 0;\n    case 1:\n      return 40;\n    case 2:\n      return 100;\n    case 3:\n      return 300;\n    case 4:\n      return 1200;\n    default:\n      throw new Error(`unexpected completed row count ${completedRowCount}`);\n  }\n}\n","export default __webpack_public_path__ + \"static/media/sprite.41007b57.mp3\";","import url from \"./sprite.mp3\";\n\n// ----\n// GENERATED CODE: Do not edit manually.\n// Update by running: yarn gen:audiosprite\n// ----\n\nexport const soundSpriteUrl: string = url;\nexport const soundSpriteMap = {\n  linesCleared: [0, 281.31519274376416] as [number, number],\n  tetris: [2000, 2681.3151927437643] as [number, number],\n};\n\nexport type SoundId = keyof typeof soundSpriteMap;\n","import colors from \"open-color\";\nimport { PieceShape } from \"./lib/core\";\n\nexport type Theme = {\n  textColor: string;\n  emptyColor: string;\n  previewColor: string;\n  backgroundColor: string;\n  pieceColors: {\n    [key in PieceShape]: string;\n  };\n};\n\nexport type ThemeId = \"light\" | \"dark\";\n\n// Open Color variant index for piece colors\nconst lightIndex = 7;\nconst darkIndex = 1;\n\nconst THEMES: Record<ThemeId, Theme> = {\n  light: {\n    textColor: colors.gray[9],\n    emptyColor: colors.gray[1],\n    previewColor: colors.gray[3],\n    backgroundColor: colors.white,\n    pieceColors: {\n      J: colors.pink[lightIndex],\n      T: colors.grape[lightIndex],\n      L: colors.violet[lightIndex],\n      I: colors.blue[lightIndex],\n      S: colors.orange[lightIndex],\n      Z: colors.lime[lightIndex],\n      O: colors.red[lightIndex],\n    },\n  },\n  dark: {\n    textColor: colors.gray[0],\n    emptyColor: colors.gray[8],\n    previewColor: colors.gray[7],\n    backgroundColor: colors.gray[9],\n    pieceColors: {\n      J: colors.pink[darkIndex],\n      T: colors.grape[darkIndex],\n      L: colors.violet[darkIndex],\n      I: colors.blue[darkIndex],\n      S: colors.orange[darkIndex],\n      Z: colors.lime[darkIndex],\n      O: colors.yellow[darkIndex],\n    },\n  },\n};\n\nexport default THEMES;\n","import { useState } from \"react\";\n\nexport function useLocalStorage<T>(\n  key: string,\n  defaultValue: T\n): [T, (value: T | null) => void] {\n  const [valueState, setValueState] = useState<T>(() => {\n    const initialPersistedData = window.localStorage.getItem(key);\n    return initialPersistedData === null\n      ? defaultValue\n      : JSON.parse(initialPersistedData);\n  });\n\n  const setValue = (value: T | null) => {\n    if (value === null) {\n      window.localStorage.removeItem(key);\n    } else {\n      window.localStorage.setItem(key, JSON.stringify(value));\n    }\n    setValueState(value || defaultValue);\n  };\n  return [valueState, setValue];\n}\n","import { useHotkey } from \"@react-hook/hotkey\";\nimport produce, { Draft } from \"immer\";\nimport {\n  EffectReducer,\n  EffectReducerExec,\n  EffectsMap,\n  useEffectReducer,\n} from \"use-effect-reducer\";\nimport useSound from \"use-sound\";\nimport {\n  BoardData,\n  calculateScore,\n  movePieceDown,\n  movePieceLeft,\n  movePieceRight,\n  movePieceToBottom,\n  newEmptyBoard,\n  newRandomPieceCentered,\n  Piece,\n  piecePositionIsValid,\n  removeCompletedRows,\n  renderPiece,\n  renderPieceWithDropPreview,\n  rotatePiece,\n} from \"../lib/core\";\nimport { SoundId, soundSpriteMap, soundSpriteUrl } from \"../sounds/sprite\";\nimport THEMES, { Theme, ThemeId } from \"../themes\";\nimport { useInterval } from \"./useInterval\";\nimport { useLocalStorage } from \"./useLocalStorage\";\n\nconst BOARD_WIDTH = 10; // blocks\nconst BOARD_HEIGHT = 20; // blocks\nconst DROP_INTERVAL = 800; // ms\n\ninterface GameState {\n  piece: Piece;\n  nextPiece: Piece;\n  paused: boolean;\n  gameOver: boolean;\n  baseBoard: BoardData;\n  score: number;\n}\n\ninterface Config {\n  boardWidth: number;\n  boardHeight: number;\n}\n\ninterface State {\n  game: GameState;\n  config: Config;\n  themeId: ThemeId;\n  settingsOpen: boolean;\n}\n\ninterface UseGameReturnedData extends State, GameState {\n  theme: Theme;\n  board: BoardData;\n}\n\nexport type UseGameReturnedValue = [\n  UseGameReturnedData,\n  React.Dispatch<Action>\n];\n\n// TODO: Refactor to avoid hard coded value\nfunction tick(\n  state: State,\n  draft: Draft<State>,\n  exec: EffectReducerExec<State, Action, Effect>\n) {\n  const { game } = state;\n\n  // If game is over or paused, do nothing\n  if (!gameIsActive(state)) {\n    return;\n  }\n\n  // Attempt to move the current piece down\n  let newPiece = movePieceDown(game.piece);\n  if (piecePositionIsValid(newPiece, game.baseBoard)) {\n    draft.game.piece = newPiece;\n    return;\n  }\n\n  // Couldn't move existing piece down so lock it into position\n  // and clear completed rows\n  let { board, completedRowCount } = removeCompletedRows(\n    renderPiece(game.piece, game.baseBoard)\n  );\n  draft.game.baseBoard = board;\n\n  if (completedRowCount === 4) {\n    exec({ type: \"playSound\", soundId: \"tetris\" });\n  } else if (completedRowCount > 0) {\n    exec({ type: \"playSound\", soundId: \"linesCleared\" });\n  }\n  draft.game.score += calculateScore(completedRowCount);\n\n  draft.game.piece = game.nextPiece;\n  draft.game.nextPiece = newRandomPieceCentered(board.width);\n  draft.game.baseBoard = board;\n\n  if (!piecePositionIsValid(game.nextPiece, board)) {\n    draft.game.gameOver = true;\n  }\n}\n\nconst gameIsActive = ({ game, settingsOpen }: State): boolean =>\n  !game.paused && !game.gameOver && !settingsOpen;\n\nconst movePieceIfValid = (\n  state: State,\n  draft: Draft<State>,\n  moveFn: (piece: Piece, board: BoardData) => Piece\n) => {\n  const { game } = state;\n  if (!gameIsActive(state)) {\n    return;\n  }\n  const newPiece = moveFn(game.piece, game.baseBoard);\n  if (piecePositionIsValid(newPiece, game.baseBoard)) {\n    draft.game.piece = newPiece;\n  }\n};\n\nfunction newGameState(config: Config): GameState {\n  return {\n    piece: newRandomPieceCentered(config.boardWidth),\n    nextPiece: newRandomPieceCentered(config.boardWidth),\n    gameOver: false,\n    paused: false,\n    baseBoard: newEmptyBoard(config.boardWidth, config.boardHeight),\n    score: 0,\n  };\n}\n\nfunction newState(config: Config): State {\n  return {\n    game: newGameState(config),\n    config: config,\n    themeId: \"light\",\n    settingsOpen: false,\n  };\n}\n\nexport function newGameData(\n  config: Config = newConfig(),\n  state: State = newState(config)\n): UseGameReturnedData {\n  return {\n    ...state,\n    ...state.game,\n    theme: THEMES[state.themeId],\n    board: renderPieceWithDropPreview(state.game.piece, state.game.baseBoard),\n  };\n}\n\nfunction newConfig(\n  boardWidth: number = BOARD_WIDTH,\n  boardHeight: number = BOARD_HEIGHT\n): Config {\n  return { boardWidth, boardHeight };\n}\n\nconst pieceMoves = {\n  left: movePieceLeft,\n  right: movePieceRight,\n  down: movePieceDown,\n  rotate: rotatePiece,\n  hardDrop: movePieceToBottom,\n};\n\ntype PieceMove = keyof typeof pieceMoves;\n\ntype Action =\n  | { type: \"tick\" }\n  | { type: \"reset\" }\n  | { type: \"movePiece\"; move: PieceMove }\n  | { type: \"togglePaused\" }\n  | { type: \"saveGame\" }\n  | { type: \"loadGame\"; game: GameState }\n  | { type: \"restoreSavedGame\" }\n  | { type: \"clearSavedGame\" }\n  | { type: \"setTheme\"; themeId: ThemeId }\n  | { type: \"openSettings\" }\n  | { type: \"closeSettings\" };\n\ntype Effect =\n  | { type: \"saveGame\"; game: GameState | null }\n  | { type: \"saveTheme\"; themeId: ThemeId | null }\n  | { type: \"restoreSavedGame\" }\n  | { type: \"playSound\"; soundId: SoundId };\n\nconst reducer: EffectReducer<State, Action, Effect> = (\n  state,\n  action,\n  exec\n): State => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case \"tick\":\n        tick(state, draft, exec);\n        break;\n      case \"loadGame\":\n        draft.game = action.game;\n        break;\n      case \"restoreSavedGame\":\n        exec({ type: \"restoreSavedGame\" });\n        break;\n      case \"reset\":\n        draft.game = newGameState(state.config);\n        break;\n      case \"movePiece\":\n        movePieceIfValid(state, draft, pieceMoves[action.move]);\n        if (action.move === \"hardDrop\") {\n          tick(draft, draft, exec);\n        }\n        break;\n      case \"togglePaused\":\n        draft.game.paused = !state.game.paused;\n        break;\n      case \"openSettings\":\n        draft.settingsOpen = true;\n        break;\n      case \"closeSettings\":\n        draft.settingsOpen = false;\n        break;\n      case \"saveGame\":\n        exec({ type: \"saveGame\", game: state.game });\n        break;\n      case \"setTheme\":\n        draft.themeId = action.themeId;\n        exec({ type: \"saveTheme\", themeId: action.themeId });\n        break;\n      case \"clearSavedGame\":\n        exec({ type: \"saveGame\", game: null });\n        draft.game = newGameState(state.config);\n        break;\n    }\n  });\n};\n\nexport default function useGame(): UseGameReturnedValue {\n  const config = newConfig();\n\n  const [initialGameState, saveGameState] = useLocalStorage<GameState>(\n    \"gameState\",\n    newGameState(config)\n  );\n\n  const [initialThemeId, saveTheme] = useLocalStorage<ThemeId>(\n    \"theme\",\n    \"light\"\n  );\n\n  const effectsMap: EffectsMap<State, Action, Effect> = {\n    playSound: (_, { soundId }) => playSound({ id: soundId }),\n    saveGame: (_, { game }) => saveGameState(game),\n    saveTheme: (_, { themeId }) => saveTheme(themeId),\n    restoreSavedGame: (_, __, _dispatch) =>\n      _dispatch({ type: \"loadGame\", game: initialGameState }),\n  };\n\n  const [state, dispatch] = useEffectReducer<State, Action, Effect>(\n    reducer,\n    { ...newState(config), game: initialGameState, themeId: initialThemeId },\n    effectsMap\n  );\n\n  const [playSound] = useSound(soundSpriteUrl, {\n    soundEnabled: gameIsActive(state),\n    sprite: soundSpriteMap,\n  });\n\n  const movePiece = (move: PieceMove) => dispatch({ type: \"movePiece\", move });\n\n  useHotkey(window, \"up\", () => movePiece(\"rotate\"));\n  useHotkey(window, \"down\", () => movePiece(\"down\"));\n  useHotkey(window, \"left\", () => movePiece(\"left\"));\n  useHotkey(window, \"right\", () => movePiece(\"right\"));\n  useHotkey(window, \"space\", () => movePiece(\"hardDrop\"));\n  useHotkey(window, \"p\", () => dispatch({ type: \"togglePaused\" }));\n  useHotkey(window, \"s\", () => dispatch({ type: \"saveGame\" }));\n  useHotkey(window, \"r\", () => dispatch({ type: \"clearSavedGame\" }));\n  useInterval(() => dispatch({ type: \"tick\" }), DROP_INTERVAL);\n\n  return [newGameData(config, state), dispatch];\n}\n","import { useEffect, useRef } from \"react\";\n\ntype Callback = () => void;\n\nexport function useInterval(callback: Callback, delay: number) {\n  const savedCallback = useRef<Callback>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current!();\n    }\n    const id = setInterval(tick, delay);\n    return () => {\n      clearInterval(id);\n    };\n  }, [delay]);\n}\n","import { createContext } from \"react\";\nimport { newGameData, UseGameReturnedValue } from \"./hooks/useGame\";\n\nexport const GameContext = createContext<UseGameReturnedValue>([\n  newGameData(),\n  () => {},\n]);\n","import { mapValues } from \"lodash\";\nimport React, { useContext, useMemo } from \"react\";\nimport { stylesheet } from \"typestyle\";\nimport { GameContext } from \"../GameContext\";\nimport useFitWithAspectRatio from \"../hooks/useFitWithAspectRatio\";\nimport { BoardData } from \"../lib/core\";\n\nconst Board = ({ board }: { board: BoardData }) => {\n  const { ref, width, height } = useFitWithAspectRatio<HTMLDivElement>(\n    board.width,\n    board.height\n  );\n  const [{ theme }] = useContext(GameContext);\n  const { grid } = board;\n\n  const sheet = useMemo(\n    () =>\n      stylesheet({\n        container: {\n          width: \"100%\",\n          height: \"100%\",\n        },\n        grid: {\n          display: \"grid\",\n          gap: \"2px 2px\",\n          gridAutoRows: \"1fr\",\n          gridTemplateColumns: `repeat(${board.width}, 1fr)`,\n          gridTemplateRows: `repeat(${board.height}, 1fr)`,\n        },\n        empty: { backgroundColor: theme.emptyColor },\n        preview: { backgroundColor: theme.previewColor },\n        ...mapValues(theme.pieceColors, (color) => ({\n          backgroundColor: color,\n        })),\n      }),\n    [\n      board.width,\n      board.height,\n      theme.emptyColor,\n      theme.previewColor,\n      theme.pieceColors,\n    ]\n  );\n\n  return (\n    <div ref={ref} className={sheet.container}>\n      <div className={sheet.grid} style={{ width, height }}>\n        {grid.flatMap((row, y) =>\n          row.flatMap((cell, x) => (\n            <div\n              key={`${x},${y}`}\n              className={\n                cell.type === \"piece\" ? sheet[cell.shape] : sheet[cell.type]\n              }\n            ></div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import { RefObject } from \"react\";\nimport useDimensions from \"react-cool-dimensions\";\n\n// Returns the largest width and height that fits within the container element's\n// dimensions, maintaining the given aspect ratio. The returned dimenions update\n// if the container element is resized. The returned ref should be attached to\n// the container element.\nexport default function useFitWithAspectRatio<T extends HTMLElement>(\n  aspectRatioWidth: number,\n  aspectRatioHeight: number\n): { ref: RefObject<T>; width: number; height: number } {\n  const {\n    ref,\n    width: containerWidth,\n    height: containerHeight,\n  } = useDimensions<T>();\n\n  let height: number;\n  let width = containerHeight * (aspectRatioWidth / aspectRatioHeight);\n  if (width > containerWidth) {\n    width = containerWidth;\n    height = containerWidth * (aspectRatioHeight / aspectRatioWidth);\n  } else {\n    height = containerHeight;\n  }\n  return { ref, width, height };\n}\n","import React, { useContext } from \"react\";\nimport { GameContext } from \"../GameContext\";\nimport THEMES from \"../themes\";\n\nexport default function Settings() {\n  const [{ theme }, dispatch] = useContext(GameContext);\n\n  const nextThemeId = theme === THEMES.dark ? \"light\" : \"dark\";\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          dispatch({ type: \"setTheme\", themeId: nextThemeId });\n          dispatch({ type: \"closeSettings\" });\n        }}\n      >\n        {nextThemeId === \"dark\" ? \"Dark Mode\" : \"Light Mode\"}\n      </button>\n      <button\n        onClick={() => {\n          dispatch({ type: \"saveGame\" });\n          dispatch({ type: \"closeSettings\" });\n        }}\n      >\n        Save Game\n      </button>\n      <button\n        onClick={() => {\n          dispatch({ type: \"restoreSavedGame\" });\n          dispatch({ type: \"closeSettings\" });\n        }}\n      >\n        Restore Saved Game\n      </button>\n      <button\n        onClick={() => {\n          dispatch({ type: \"clearSavedGame\" });\n          dispatch({ type: \"closeSettings\" });\n        }}\n      >\n        Clear Saved Game\n      </button>\n    </>\n  );\n}\n","import { color } from \"csx\";\nimport React, { ReactElement, useMemo } from \"react\";\nimport Modal from \"react-modal\";\nimport { stylesheet } from \"typestyle\";\nimport { GameContext } from \"../GameContext\";\nimport useGame from \"../hooks/useGame\";\nimport Board from \"./Board\";\nimport Settings from \"./Settings\";\n\nfunction Game(): ReactElement {\n  const [data, dispatch] = useGame();\n  const { gameOver, paused, board, score, settingsOpen, theme } = data;\n\n  const sheet = useMemo(\n    () =>\n      stylesheet({\n        container: {\n          backgroundColor: theme.backgroundColor,\n          color: theme.textColor,\n          width: \"100%\",\n          height: \"100%\",\n        },\n        topBar: {\n          height: \"10%\",\n          padding: \"1em\",\n        },\n        boardContainer: {\n          height: \"90%\",\n          padding: \"1em\",\n        },\n      }),\n    [theme]\n  );\n\n  return (\n    <GameContext.Provider value={[data, dispatch]}>\n      <div className={sheet.container}>\n        <div className={sheet.topBar}>\n          <div>\n            {paused ? \"Paused\" : \"Press P to pause\"}\n            <button onClick={() => dispatch({ type: \"openSettings\" })}>\n              Settings\n            </button>\n          </div>\n          <div>\n            <strong>Score:</strong> {score}\n          </div>\n          <Modal\n            isOpen={settingsOpen}\n            contentLabel=\"Settings\"\n            onRequestClose={() => dispatch({ type: \"closeSettings\" })}\n            style={{\n              content: { backgroundColor: theme.backgroundColor },\n              overlay: {\n                backgroundColor: color(theme.backgroundColor)\n                  .fadeOut(\"10%\")\n                  .toString(),\n              },\n            }}\n          >\n            <Settings />\n          </Modal>\n          <div>\n            {gameOver ? (\n              <>\n                Game Over{\" \"}\n                <button onClick={() => dispatch({ type: \"reset\" })}>\n                  New Game\n                </button>\n              </>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n        <div className={sheet.boardContainer}>\n          <Board board={board} />\n        </div>\n      </div>\n    </GameContext.Provider>\n  );\n}\n\nexport default Game;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { normalize, setupPage } from \"csstips\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Modal from \"react-modal\";\nimport Game from \"./components/Game\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nif (process.env.NODE_ENV !== \"test\") {\n  Modal.setAppElement(\"#root\");\n  normalize();\n  setupPage(\"#root\");\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}